#!/usr/bin/env node

var util = require("util");
  fs = require('fs'),
  path = require('path'),
  cli = require('optimist'),
  cssminx = require('../index');


var argv = cli.usage('Usage:\ncssminx [option] -o <output-file> <input-file>\n')
              .describe('h', 'print this message')
              .describe('e', 'remove empty(cleancss)')
              .describe('v', 'show version')
              .describe('charset', 'specify input charset; output is encoded using the same charset')
              .default('charset', 'utf-8')
              .argv;


var options = {
  source: null,
  target: null
};
var cleanOptions = {};
var fromStdin = !process.env['__DIRECT__'] && process.stdin.readable;

if (argv.o) options.target = argv.o;
if (argv._) options.source = argv._[0];
if (argv.e) cleanOptions.removeEmpty = true;
cleanOptions.charset = argv.charset;

if (argv.v) {
  var packageConfig = fs.readFileSync(path.join(path.dirname(fs.realpathSync(process.argv[1])), '../package.json'));
  util.puts(JSON.parse(packageConfig).version);
  return 0;
}

if (argv.h || argv.help || (!fromStdin && argv._.length == 0)) {
  cli.showHelp();
  return 0;
}

if (options.source) {
  fs.readFile(options.source, function(error, buf) {
    if (error) throw error;
    output(cssminx.compress(buf, cleanOptions));
  });
} else {
  var stdin = process.openStdin();
  stdin.setEncoding('utf-8');
  var text = '';
  stdin.on('data', function(chunk) {
    text += chunk;
  });
  stdin.on('end', function() {
    output(cssminx.compress(text, cleanOptions));
  });
}

function output(cleaned) {
  if (options.target) {
    fs.writeFileSync(options.target, cleaned, cleanOptions.charset);
  } else {
    process.stdout.write(cleaned);
  }
};
